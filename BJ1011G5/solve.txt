1011번 알파센타우리
고른이유 : 문명5 과승엔딩이 알파센타우리로 떠나는거라 왠지모르게 친숙했음

일단 기본적으로 쓰이는 
BufferedReader 템플릿은 넘어가고

문제가 워낙에 난해해서 이해가 잘 되지 않았다.
몇 번 노트에 적어보며 하나씩 해봄
예제
0 3
0 1 2 3
45 50
45 46 48 49 50
...

예를들어 100이라고 치면
0 1 3 6 10 15... 이런식으로 가다가
50부근에서는 줄어들어야 100에서 딱 멈출 수 있겠구나 생각이 들었음

그리고 시작값과 도착값은 사실 중요하지않고
중요한건 "거리" 즉 도착값-시작값이 중요하다는 것도 알게됨

그 다음에 수식에대한 노가다를 해봄

예제의 차이를 보면 각각 3 4 5다
3 -> 1 1 1 -> 3
4 -> 1 2 1 -> 3
5 ->  1 2 1 1 -> 4
5의 경우가 중요하다. 1 1 2 1 인지 1 2 1 1 인지는 중요하지 않다.

좀 더 알아보자
6 -> 1 2 2 1 -> 4
7 -> 1 2 1 2 1 -> 5
8 -> 1 2 2 2 1 -> 5
9 -> 1 2 3 2 1 -> 5
10 -> 1 2 3 2 1 1 -> 6
11 -> 1 2 3 2 2 1 -> 6
12 -> 1 2 3 3 2 1 -> 6
13 -> 1 2 3 3 2 1 1 -> 7
14 -> 1 2 3 3 2 2 1 -> 7
15 -> 1 2 3 3 3 2 1 -> 7
16 -> 1 2 3 4 3 2 1 -> 7

여기까지 오다가 뭔가 번뜩였다.

결과적으로 나온 숫자를 보면
3 3 4 4 (2개) 5 5 5 6 6 6 (3개) 7 7 7 7 (4개)
그렇다면 다음 숫자는 8 8 8 8 인가?

그리고 하나 더.
3번이 최솟값인 수에서 4번이 최솟값인 수로 넘어갈 때
3번이 최솟값인 수의 최댓값은 4
5번이 최솟값인 수의 최댓값은 9
7번이 최솟값인 수의 최댓값은 16
각각 2 3 4의 제곱수다.

일단 위와 아래의 정보를 바탕으로 두가지를 떠올려보았다.

1.일단 8 8 8 8 인지부터 확인해 본다.

17 -> 1 2 3 4 3 2 1 1 -> 8
18 (건너뜀)
19 (건너뜀)
20 -> 1 2 3 4 4 3 2 1 -> 8

어렵지않게 21은 9를 향한다는 사실을 알 수 있었다.

2. 제곱과의 관계
1번이 최솟값인 수 -> 최댓값은 당연히 1 (성립가능)
9번이 최솟값인 수의 최댓값 -> 예상대로라면 5의 제곱수인 25
모든 숫자를 다 해 볼수는 없으니, 25와 26의 경우를 확인해본다

25 -> 1 2 3 4 5 4 3 2 1 -> 9
근데 이 쯤 오면 대충 눈치라는게 생긴다
26은 끝자락에 1이 하나 추가되어서 10이 될 것이라는걸
(9번이 최댓값인 수 -> 5의 제곱수)

물론 여기까지 오고도 제곱수는 어디까지나 2의 간격을 표시할 뿐이었다.

어떻게 해결할까 고민하다가 좋은 생각이 떠올랐다.

대충 방금 사용한 숫자인 25를 예로 들어보겠다.

25 -> 5의 제곱수
36 -> 6의 제곱수

그렇다면 25~35까지의 숫자는 5.xx로 나올 것이다.
거기에 제곱수와 제곱수의 차이는 언제나 홀수가 될 수 밖에 없고.

(1) 36-25 = 11
(2) 49-36 = 13
(3) 64-49 = 15
...

여기서 놀라운 사실
36-25 = 11을 큰 수를 기준으로 생각한다면 2n-1로 일반화 할 수 있다.

(1) 2*6-1 = 11
(2) 2*7-1 = 13
(3) 2*8-1 = 15

그리고 이 값을 반으로 나눈다면 직관적으로 쪼갤 수 있다.
11 = 5 + 6
13 = 6 + 7
15 = 7 + 8
...

한 번 프로그램 돌리는 것을 상상해보았다.
여기 임의의 숫자 37이 있다.

37은 36과 49 사이인 숫자이므로
루트로 나누면 6.xx 가 나올 것이다.
그리고 두 수의 차이는 6과 7이다.
이제까지의 공식으로 37~42까지는 10회
(여기서 37~42은 [37,42]을 의미한다 -> 닫힌구간)
그리고 그 사이 43~49까지는 11회가 될 것이라는걸 짐작할 수 있다.

어떤 숫자를 가져와도 이 알고리즘은 그대로 적용할 수 있다.

ex) 200 323 -> 123
(1)11의 제곱수 121과 12의 제곱수 144 사이에 있는 숫자 
(2)11.xx
(3)2*12-1 = 23
(4)[122,132] -> 22 [133,144] -> 23
(5)123 -> 22

이런식으로 적용된다.

func함수
exup -> 루트 후 올림으로 정수로 나타낸 값
exdown -> 루트 후 내림으로 정수로 나타낸 값
d = 제곱수 사이의 차
if-else문 -> 큰 제곱수에 가까우면 2n-1 적용, 작은 제곱수에 가까우면 2n-2 적용(정확한 값은 위의 식 참조)

나머지는 for문을 활용해 print한다.


